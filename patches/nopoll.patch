diff --git a/src/nopoll_conn.c b/src/nopoll_conn.c
index 8612bfd..c2965b2 100644
--- a/src/nopoll_conn.c
+++ b/src/nopoll_conn.c
@@ -193,6 +193,36 @@ nopoll_bool                 nopoll_conn_set_sock_tcp_nodelay   (NOPOLL_SOCKET so
 	return nopoll_true;
 } /* end */
 
+/**
+ * @brief Allows to bind device
+ *
+ * @param socket The socket to be configured.
+ *
+ * @param outbound_interface The bind device name value to be configured
+ *
+ * @return nopoll_true if the operation is completed.
+ */
+nopoll_bool nopoll_conn_set_outbound_interface   (noPollCtx   * ctx, NOPOLL_SOCKET socket,
+								const char * outbound_interface)
+{
+	
+	/* local variables */
+	int result = nopoll_false;
+	nopoll_log (ctx, NOPOLL_LEVEL_INFO, "Nopoll, Outbound Interface %s",outbound_interface);
+	if(outbound_interface != NULL) {
+	result      = setsockopt(socket, SOL_SOCKET, SO_BINDTODEVICE,
+			outbound_interface, strlen(outbound_interface)+1);
+	}
+	nopoll_log (ctx, NOPOLL_LEVEL_INFO, " setsockopt result: %d",result);
+	if (result < 0) {
+	        nopoll_log (ctx, NOPOLL_LEVEL_CRITICAL, "Error inside nopoll set socket opt");
+		return nopoll_false;
+	}
+
+	/* properly configured */
+	return nopoll_true;
+} /* end */
+
 /** 
  * @internal Allows to create a plain socket connection against the
  * host and port provided.
@@ -207,69 +237,140 @@ nopoll_bool                 nopoll_conn_set_sock_tcp_nodelay   (NOPOLL_SOCKET so
  */
 NOPOLL_SOCKET nopoll_conn_sock_connect (noPollCtx   * ctx,
 					const char  * host,
-					const char  * port)
+					const char  * port,
+					const char  * outbound_interface)
 {
-	struct hostent     * hostent;
 	struct sockaddr_in   saddr;
 	NOPOLL_SOCKET        session;
+	int retVal;
+	char addrstr[100];
+	void *ptr = NULL;
+	char *localIp = "10.0.0.1";
+	struct addrinfo *res, *result;
+	struct addrinfo hints = {};
+
+	memset(&hints,0,sizeof(hints));
+	hints.ai_family = AF_INET;
+	hints.ai_socktype = SOCK_STREAM;
+	hints.ai_protocol = 0;
 
 	/* resolve hosting name */
-	hostent = gethostbyname (host);
-	if (hostent == NULL) {
-		nopoll_log (ctx, NOPOLL_LEVEL_DEBUG, "unable to resolve host name %s", host);
+	retVal = getaddrinfo(host, "http", &hints, &result);
+	if (retVal != 0){ 
+		nopoll_log (ctx, NOPOLL_LEVEL_CRITICAL, "unable to resolve host name %s, error: %s", host, gai_strerror(retVal));
 		return -1;
-	} /* end if */
+	} 
+	else
+	{
+		res = result;
+		if(res)
+		{         
+			inet_ntop (res->ai_family, res->ai_addr->sa_data, addrstr, 100);
+			ptr = &((struct sockaddr_in *) res->ai_addr)->sin_addr;
+			inet_ntop (res->ai_family, ptr, addrstr, 100);
+			nopoll_log (ctx, NOPOLL_LEVEL_INFO, "ptr->s_addr %d", ((struct in_addr *) ptr)->s_addr);
+			
+			nopoll_log (ctx, NOPOLL_LEVEL_INFO, "IPv4 address of %s is %s \n", host, addrstr);
+			if (strcmp(localIp,addrstr) == 0)
+			{
+				/* If Host DNS is resolved to 10.0.0.1 which means there is problem and client should not connect to this address */
+				nopoll_log (ctx, NOPOLL_LEVEL_INFO, "Host Ip resolved to 10.0.0.1");
+				nopoll_log (ctx, NOPOLL_LEVEL_CRITICAL, "unable to connect to remote host %s:%s as IP resolved to 10.0.0.1", host, port);
+				freeaddrinfo(result);
+				return -1;			
+			}
+			else
+			{
+				nopoll_log (ctx, NOPOLL_LEVEL_INFO, "Host Ip resolved correctly, proceeding with the connection");								
+			}
+		}	
+	}
 
 	/* create the socket and check if it */
 	session      = socket (AF_INET, SOCK_STREAM, 0);
 	if (session == NOPOLL_INVALID_SOCKET) {
 		nopoll_log (ctx, NOPOLL_LEVEL_CRITICAL, "unable to create socket");
+		freeaddrinfo(result);
 		return -1;
 	} /* end if */
 
 	/* disable nagle */
 	nopoll_conn_set_sock_tcp_nodelay (session, nopoll_true);
 
+	nopoll_conn_set_outbound_interface(ctx,session, outbound_interface);
 	/* prepare socket configuration to operate using TCP/IP
 	 * socket */
-        memset(&saddr, 0, sizeof(saddr));
-	saddr.sin_addr.s_addr = ((struct in_addr *)(hostent->h_addr))->s_addr;
-        saddr.sin_family    = AF_INET;
-        saddr.sin_port      = htons((uint16_t) strtod (port, NULL));
+	memset(&saddr, 0, sizeof(saddr));
+	saddr.sin_addr.s_addr = ((struct in_addr *) ptr)->s_addr;
+	saddr.sin_family    = AF_INET;
+	saddr.sin_port      = htons((uint16_t) strtod (port, NULL));
 
 	/* set non blocking status */
 	nopoll_conn_set_sock_block (session, nopoll_false);
 	
 	/* do a tcp connect */
-        if (connect (session, (struct sockaddr *)&saddr, sizeof(saddr)) < 0) {
+	if (connect (session, (struct sockaddr *)&saddr, sizeof(saddr)) < 0) {
 		if(errno != NOPOLL_EINPROGRESS && errno != NOPOLL_EWOULDBLOCK && errno != NOPOLL_ENOTCONN) { 
-		        shutdown (session, SHUT_RDWR);
-                        nopoll_close_socket (session);
+			shutdown (session, SHUT_RDWR);
+			nopoll_close_socket (session);
 
 			nopoll_log (ctx, NOPOLL_LEVEL_WARNING, "unable to connect to remote host %s:%s errno=%d",
 				    host, port, errno);
+			freeaddrinfo(result);
 			return -1;
 		} /* end if */
 	} /* end if */
-
+	freeaddrinfo(result);
 	/* return socket created */
 	return session;
 }
 
 
+/** 
+ * @internal Function that builds the header string with multiple header
+ * header names and values passed as input.
+ */
+char * getHeaderString(const char *headerNames[], const char *headerValues[], const int headerCount)
+{	
+	int index=0;
+	char *tempString = NULL;
+	char *headerString = NULL;
+	int size = 0;
+	for(index=0; index < headerCount; index++)
+	{
+		size = 	4 + strlen(headerNames[index]) + strlen(headerValues[index]) + 1; /* "\r\n: " + headername + headervalue + '\0' */
+		tempString = (char *)malloc(sizeof(char) * size);
+		sprintf(tempString, "\r\n%s: %s", headerNames[index],headerValues[index]);
+
+		if(headerString)
+		{	
+			headerString = (char *) realloc(headerString, sizeof(char) * (strlen(headerString) + size));
+			headerString = strcat(headerString,tempString);
+		}
+		else
+		{	
+			headerString = (char *) malloc(sizeof(char) * size);
+			strcpy(headerString,tempString);
+		}		
+		free(tempString);
+	}
+	return headerString;
+}
 
 
 /** 
  * @internal Function that builds the client init greetings that will
  * be send to the server according to registered implementation.
  */ 
-char * __nopoll_conn_get_client_init (noPollConn * conn, noPollConnOpts * opts)
+char * __nopoll_conn_get_client_init (noPollConn * conn,noPollConnOpts * opts, const char   * headerNames[], const char   * headerValues[], const int headerCount)
 {
 	/* build sec-websocket-key */
 	char key[50];
 	int  key_size = 50;
 	char nonce[17];
+	char *request;
 
+	char *headerString = NULL;	
 	/* get the nonce */
 	if (! nopoll_nonce (nonce, 16)) {
 		nopoll_log (conn->ctx, NOPOLL_LEVEL_CRITICAL, "Failed to get nonce, unable to produce Sec-WebSocket-Key.");
@@ -287,9 +388,15 @@ char * __nopoll_conn_get_client_init (noPollConn * conn, noPollConnOpts * opts)
 	/* create accept and store */
 	conn->handshake = nopoll_new (noPollHandShake, 1);
 	conn->handshake->expected_accept = nopoll_strdup (key);
-
-	/* send initial handshake                                                                                                                        |cookie |prot  | */
-	return nopoll_strdup_printf ("GET %s HTTP/1.1\r\nHost: %s\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Key: %s\r\nOrigin: %s\r\n%s%s%s%s%s%s%s%sSec-WebSocket-Version: %d\r\n\r\n", 
+	
+	if(headerNames != NULL && headerValues != NULL && headerCount > 0)
+	{
+		headerString = getHeaderString(headerNames, headerValues, headerCount);
+	}
+	
+	/* send initial handshake */
+	
+	request = nopoll_strdup_printf ("GET %s HTTP/1.1\r\nHost: %s\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Key: %s\r\nOrigin: %s\r\n%s%s%s%s%s%s%s%sSec-WebSocket-Version: %d%s\r\n\r\n", 
 				     conn->get_url, conn->host_name, 
 				     /* sec-websocket-key */
 				     key,
@@ -305,7 +412,15 @@ char * __nopoll_conn_get_client_init (noPollConn * conn, noPollConnOpts * opts)
 				     conn->protocols ? ": " : "",
 				     conn->protocols ? conn->protocols : "",
 				     conn->protocols ? "\r\n" : "",
-				     conn->ctx->protocol_version);
+				     conn->ctx->protocol_version, (headerString != NULL) ? headerString : "");
+
+	if(headerString != NULL)
+	{	
+		free(headerString);
+		headerString = NULL;
+	}
+
+	return request;
 }
 
 
@@ -478,6 +593,9 @@ SSL_CTX * __nopoll_conn_get_ssl_context (noPollCtx * ctx, noPollConn * conn, noP
 		/* printf ("**** REPORTING TLSv1.1 ****\n"); */
 		return SSL_CTX_new (is_client ? TLSv1_1_client_method () : TLSv1_1_server_method ()); 
 #endif
+	case NOPOLL_METHOD_TLSV1_2:
+		nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, "**** REPORTING TLSv1.2 ****\n");
+		return SSL_CTX_new (is_client ? TLSv1_2_client_method () : TLSv1_2_server_method ());	
 	case NOPOLL_METHOD_SSLV3:
 		/* printf ("**** REPORTING SSLv3 ****\n"); */
 		return SSL_CTX_new (is_client ? SSLv3_client_method () : SSLv3_server_method ()); 
@@ -598,7 +716,11 @@ noPollConn * __nopoll_conn_new_common (noPollCtx       * ctx,
 				       const char      * host_name,
 				       const char      * get_url, 
 				       const char      * protocols,
-				       const char      * origin)
+				       const char      * origin,
+				       const char      * outbound_interface,
+                       const char   * headerNames[],
+				       const char   * headerValues[],
+				       const int headerCount)
 {
 	noPollConn     * conn;
 	NOPOLL_SOCKET    session;
@@ -620,7 +742,8 @@ noPollConn * __nopoll_conn_new_common (noPollCtx       * ctx,
 		host_port = "80";
 
 	/* create socket connection in a non block manner */
-	session = nopoll_conn_sock_connect (ctx, host_ip, host_port);
+	session = nopoll_conn_sock_connect (ctx, host_ip, host_port, outbound_interface);
+	
 	if (session == NOPOLL_INVALID_SOCKET) {
 		/* release connection options */
 		__nopoll_conn_opts_release_if_needed (options);
@@ -691,7 +814,7 @@ noPollConn * __nopoll_conn_new_common (noPollCtx       * ctx,
 
 
 	/* get client init payload */
-	content = __nopoll_conn_get_client_init (conn, options);
+	content = __nopoll_conn_get_client_init (conn, options,headerNames, headerValues, headerCount);
 
 	if (content == NULL) {
 		nopoll_log (ctx, NOPOLL_LEVEL_CRITICAL, "Failed to build client init message, unable to connect");
@@ -905,12 +1028,16 @@ noPollConn * nopoll_conn_new (noPollCtx  * ctx,
 			      const char * host_name,
 			      const char * get_url, 
 			      const char * protocols,
-			      const char * origin)
+			      const char * origin,
+			      const char * outbound_interface,
+		          const char * headerNames[],
+			      const char * headerValues[],
+			      const int headerCount)
 {
 	/* call common implementation */
 	return __nopoll_conn_new_common (ctx, NULL, nopoll_false, 
 					 host_ip, host_port, host_name, 
-					 get_url, protocols, origin);
+					 get_url, protocols, origin, outbound_interface, headerNames, headerValues, headerCount);
 }
 
 /** 
@@ -961,12 +1088,16 @@ noPollConn * nopoll_conn_new_opts (noPollCtx       * ctx,
 				   const char      * host_name,
 				   const char      * get_url, 
 				   const char      * protocols,
-				   const char      * origin)
+				   const char      * origin,
+				   const char      * outbound_interface,
+                   const char * headerNames[],
+			       const char * headerValues[],
+				   const int headerCount)
 {
 	/* call common implementation */
 	return __nopoll_conn_new_common (ctx, opts, nopoll_false, 
 					 host_ip, host_port, host_name, 
-					 get_url, protocols, origin);
+					 get_url, protocols, origin, outbound_interface, headerNames, headerValues, headerCount);
 }
 
 nopoll_bool __nopoll_tls_was_init = nopoll_false;
@@ -1021,7 +1152,11 @@ noPollConn * nopoll_conn_tls_new (noPollCtx  * ctx,
 				  const char * host_name,
 				  const char * get_url, 
 				  const char * protocols,
-				  const char * origin)
+				  const char * origin,
+				  const char * outbound_interface,
+                  const char * headerNames[],
+			      const char * headerValues[],
+				  const int headerCount)
 {
 	/* init ssl ciphers and engines */
 	if (! __nopoll_tls_was_init) {
@@ -1032,7 +1167,7 @@ noPollConn * nopoll_conn_tls_new (noPollCtx  * ctx,
 	/* call common implementation */
 	return __nopoll_conn_new_common (ctx, options, nopoll_true, 
 					 host_ip, host_port, host_name, 
-					 get_url, protocols, origin);
+					 get_url, protocols, origin, outbound_interface, headerNames, headerValues, headerCount);
 }
 
 /** 
@@ -1128,7 +1263,9 @@ nopoll_bool    nopoll_conn_is_ready (noPollConn * conn)
 		return nopoll_false;
 	if (conn->session == NOPOLL_INVALID_SOCKET)
 		return nopoll_false;
-	if (! conn->handshake_ok) {
+
+	/* conn->handshake->received_307 will always be false other than http redirect */
+	if (! conn->handshake_ok && !conn->handshake->received_307) {
 		/* acquire here handshake mutex */
 		nopoll_mutex_lock (conn->ref_mutex);
 
@@ -1138,6 +1275,11 @@ nopoll_bool    nopoll_conn_is_ready (noPollConn * conn)
 		/* release here handshake mutex */
 		nopoll_mutex_unlock (conn->ref_mutex);
 	}
+	
+	if(conn->handshake->received_307)
+	{
+		return nopoll_true; /* in case of http redirection, conn->handshake_ok will never be true as the response buffer from the server will never have "Sec-Websocket-Accept". Consequently, we have to return true to break the loop inside nopoll_conn_wait_until_connection_ready() */
+	}
 	return conn->handshake_ok;
 }
 
@@ -1202,6 +1344,22 @@ int           nopoll_conn_get_id (noPollConn * conn)
 	return conn->id;
 }
 
+/**
+ * @brief Allows to get the get_url from the connection
+ *
+ * @param conn The websocket connection where the operation takes place.
+ *
+ * @return The get_url provided be the client
+ *
+ */
+const char * nopoll_conn_get_requested_url (noPollConn * conn)
+{
+    if (conn->get_url == NULL)
+        return "/";
+    else
+        return conn->get_url;
+}
+
 /** 
  * @brief Allows to get the noPollCtx context object associated to the
  * connection (or where the connection is working).
@@ -1819,6 +1977,32 @@ void __nopoll_pack_content (char * buffer, int start, int bytes)
 	return;
 }
 
+/**
+ * @internal Function to delay
+ * @note delay goes up by factor of .125 each time
+ * @note up to 1 sec max
+*/ 
+static void __nopoll_receive_delay (long *wait_usecs)
+{
+	long rem;
+	long t = *wait_usecs;
+
+	nopoll_sleep (t);
+
+	if (t == 1000000) {
+		return;
+	}
+
+	rem = t >> 3;
+	t += rem;
+	if (t > 1000000) {
+		t = 1000000;
+	}
+
+	*wait_usecs = t;
+}
+
+    
 /** 
  * @internal Function used to read bytes from the wire. 
  *
@@ -1828,6 +2012,7 @@ void __nopoll_pack_content (char * buffer, int start, int bytes)
 int         __nopoll_conn_receive  (noPollConn * conn, char  * buffer, int  maxlen)
 {
 	int         nread;
+	long				wait_usecs = 500;
 
 	if (conn->pending_buf_bytes > 0) {
 		nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, "Calling with bytes we can reuse (%d), requested: %d",
@@ -1864,14 +2049,21 @@ int         __nopoll_conn_receive  (noPollConn * conn, char  * buffer, int  maxl
 #if defined(NOPOLL_OS_UNIX)
 	errno = 0;
 #endif
-	if ((nread = conn->receive (conn, buffer, maxlen)) == NOPOLL_SOCKET_ERROR) {
-		/* nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, " returning errno=%d (%s)", errno, strerror (errno)); */
-		if (errno == NOPOLL_EAGAIN) 
-			return 0;
-		if (errno == NOPOLL_EWOULDBLOCK) 
+	/* if ((nread = conn->receive (conn, buffer, maxlen)) == NOPOLL_SOCKET_ERROR) { */
+	if ((nread = conn->receive (conn, buffer, maxlen)) < 0) {
+                nopoll_log (conn->ctx, NOPOLL_LEVEL_CRITICAL, " conn receive nread=%d, errno=%d (%s)", nread,errno, strerror (errno));
+		if (errno == NOPOLL_EAGAIN) {
+			__nopoll_receive_delay (&wait_usecs);
+			goto keep_reading;
+			/* return 0; */
+		}
+		if (errno == NOPOLL_EWOULDBLOCK) {
 			return 0;
-		if (errno == NOPOLL_EINTR) 
+		}
+		if (errno == NOPOLL_EINTR) {
+			__nopoll_receive_delay (&wait_usecs);
 			goto keep_reading;
+		}
 		
 		nopoll_log (conn->ctx, NOPOLL_LEVEL_CRITICAL, "unable to readn=%d, error code was: %d (%s) (shutting down connection)", maxlen, errno, strerror (errno));
 		nopoll_conn_shutdown (conn);
@@ -1881,6 +2073,12 @@ int         __nopoll_conn_receive  (noPollConn * conn, char  * buffer, int  maxl
 	/* nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, " returning bytes read = %d", nread); */
 	if (nread == 0) {
 		/* check for blocking operations */
+		if (errno == NOPOLL_EAGAIN) {
+			__nopoll_receive_delay (&wait_usecs);
+			goto keep_reading;
+			/* return 0; */
+		}
+		nopoll_log (conn->ctx, NOPOLL_LEVEL_CRITICAL, "conn receive zero bytes, errno=%d (%s)", errno, strerror (errno));
 		if (errno == NOPOLL_EAGAIN || errno == NOPOLL_EWOULDBLOCK) {
 			nopoll_log (conn->ctx, NOPOLL_LEVEL_WARNING, "unable to read from conn-id=%d (%s:%s), connection is not ready (errno: %d : %s)",
 				    conn->id, conn->host, conn->port, errno, strerror (errno));
@@ -1894,8 +2092,10 @@ int         __nopoll_conn_receive  (noPollConn * conn, char  * buffer, int  maxl
 	} /* end if */
 
 	/* ensure we don't access outside the array */
-	if (nread < 0) 
+	if (nread < 0) {
+		nopoll_log (conn->ctx, NOPOLL_LEVEL_CRITICAL, "** nread < 0 (%d)", nread);
 		nread = 0;
+	}
 
 	buffer[nread] = 0;
 	return nread;
@@ -2350,6 +2550,13 @@ int nopoll_conn_complete_handshake_client (noPollCtx * ctx, noPollConn * conn, c
 			iterator++;
 		if (! nopoll_ncmp (buffer + iterator, "101", 3)) {
 			nopoll_log (ctx, NOPOLL_LEVEL_CRITICAL, "websocket server denied connection with: %s", buffer + iterator);
+			if(nopoll_ncmp (buffer + iterator, "307", 3)|| nopoll_ncmp (buffer + iterator, "302", 3) || nopoll_ncmp (buffer + iterator, "303", 3) )
+			{
+				nopoll_log (ctx, NOPOLL_LEVEL_INFO, "Received HTTP 30x response from server");
+                /* Mark 307 flag as true */
+                conn->handshake->received_307 = nopoll_true;
+				return 1; /* continue to read next lines for redirect Location */
+			}
 			return 0; /* do not continue */
 		} /* end if */
 
@@ -2387,7 +2594,14 @@ int nopoll_conn_complete_handshake_client (noPollCtx * ctx, noPollConn * conn, c
 	} else if (strcasecmp (header, "Connection") == 0) {
 		conn->handshake->connection_upgrade = 1;
 		nopoll_free (value);
-	} else {
+	} else if (strcasecmp (header, "Location") == 0) {
+		if(conn->handshake->received_307)
+		{
+			conn->handshake->redirectURL = value;
+			nopoll_log (ctx, NOPOLL_LEVEL_INFO, "nopoll_conn_complete_handshake_client: conn->handshake->redirectURL: %s",conn->handshake->redirectURL);
+		}
+	}
+	else {
 		/* release value, no body claimed it */
 		nopoll_free (value);
 	} /* end if */
@@ -2606,7 +2820,7 @@ noPollMsg   * nopoll_conn_get_msg (noPollConn * conn)
 	if (conn->previous_msg) {
 		nopoll_log (conn->ctx, NOPOLL_LEVEL_WARNING, "Reading bytes (previously read %d) from a previous unfinished frame (pending: %d) over conn-id=%d",
 			    conn->previous_msg->payload_size, conn->previous_msg->remain_bytes, conn->id);
-		
+	
 		/* build next message holder to continue with this content */
 		if (conn->previous_msg->payload_size > 0) {
 			msg = nopoll_msg_new ();
@@ -2702,7 +2916,7 @@ noPollMsg   * nopoll_conn_get_msg (noPollConn * conn)
 		memcpy (conn->pending_buf + conn->pending_buf_bytes, buffer, bytes);
 		conn->pending_buf_bytes += bytes;
 		
-		nopoll_log (conn->ctx, NOPOLL_LEVEL_WARNING, 
+		nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, 
 			    "Expected to receive complete websocket frame header but found only %d bytes over conn-id=%d, saving to reuse later",
 			    bytes, conn->id);
 		return NULL;
@@ -2810,7 +3024,7 @@ noPollMsg   * nopoll_conn_get_msg (noPollConn * conn)
 			/* nothing more to add here, close frame
 			   without content received, so we have no
 			   reason to keep on reading */
-			nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, "Proper connection close frame received id=%d, shutting down", conn->id);
+			nopoll_log (conn->ctx, NOPOLL_LEVEL_INFO, "Proper connection close frame received id=%d, shutting down", conn->id);
 			nopoll_msg_unref (msg);
 			nopoll_conn_shutdown (conn);
 			return NULL;
@@ -2823,12 +3037,12 @@ noPollMsg   * nopoll_conn_get_msg (noPollConn * conn)
 
 	if (msg->op_code == NOPOLL_PING_FRAME) {
 		nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, "PING received over connection id=%d, replying PONG", conn->id);
-		nopoll_msg_unref (msg);
+		/*nopoll_msg_unref (msg);
 
-		/* call to send pong */
-		nopoll_conn_send_pong (conn);
+		 call to send pong */
+		/*nopoll_conn_send_pong (conn);
 
-		return NULL;
+		return NULL;*/
 	} /* end if */
 
 	/* get more bytes */
@@ -2930,6 +3144,8 @@ read_payload:
 	/* update was a fragment */
 	conn->previous_was_fragment = msg->is_fragment && msg->has_fin == 0;
 
+	nopoll_log(conn->ctx, NOPOLL_LEVEL_DEBUG, "bytes %d, msg->payload_size %d, msg->remain_bytes %d, msg->has_fin %d, msg->op_code %d\n",bytes,msg->payload_size,msg->remain_bytes,msg->has_fin,msg->op_code);
+
 	/* do not notify any frame since no content was found */
 	if (bytes == 0 && msg == conn->previous_msg) {
 		nopoll_log (conn->ctx, NOPOLL_LEVEL_DEBUG, "bytes == %d, msg (%p) == conn->previous_msg (%p)",
@@ -3370,6 +3586,20 @@ void          nopoll_conn_set_on_msg (noPollConn              * conn,
 
 	return;
 }
+void          nopoll_conn_set_on_ping_msg (noPollConn              * conn,
+				      noPollOnMessageHandler    on_ping_msg,
+				      noPollPtr                 user_data)
+{
+	if (conn == NULL)
+		return;
+
+	/* configure on message handler */
+	conn->on_ping_msg      = on_ping_msg;
+	conn->on_ping_msg_data = user_data;
+
+	return;
+}
+
 
 /** 
  * @brief Allows to configure a handler that is called when the
@@ -4129,14 +4359,18 @@ nopoll_bool nopoll_conn_accept_complete (noPollCtx * ctx, noPollConn * listener,
  * @param timeout The timeout operation to limit the wait
  * operation. Timeout is provided in seconds.
  *
+ * @param message in-out parameter of 64 byte. The response message string description indicating 
+ * "Success", "Failure" or "Redirect: Redirect_URL". Caller needs to allocate memory for this. 
+ *
  * @return The function returns when the timeout was reached or the
  * connection is ready. In the case the connection is ready when the
  * function finished nopoll_true is returned, otherwise nopoll_false.
  */
 nopoll_bool      nopoll_conn_wait_until_connection_ready (noPollConn * conn,
-							  int          timeout)
+							  int          timeout, char * message)
 {
 	long int total_timeout = timeout * 1000000;
+	nopoll_bool result = nopoll_false;
 
 	/* check if the connection already finished its connection
 	   handshake */
@@ -4153,8 +4387,31 @@ nopoll_bool      nopoll_conn_wait_until_connection_ready (noPollConn * conn,
 		total_timeout = total_timeout - 500;
 	} /* end if */
 
+	result = nopoll_conn_is_ok (conn) && nopoll_conn_is_ready (conn);
+	
+	if(conn->handshake->received_307 == nopoll_true && (conn->handshake->redirectURL != NULL))
+	{
+		if(message != NULL)
+		{
+			snprintf(message, strlen(conn->handshake->redirectURL) + 10, "Redirect:%s", conn->handshake->redirectURL);
+			nopoll_free (conn->handshake->redirectURL);
+		}
+		conn->handshake->received_307 = nopoll_false;
+		nopoll_log (conn->ctx, NOPOLL_LEVEL_INFO, "nopoll_conn_wait_until_connection_ready() response: message: %s" ,message );		
+		return nopoll_false; /* retry with redirection URLs */
+	}
+	else if(result && message != NULL)
+	{
+		strncpy(message, "Success", strlen("Success")+1);
+	}
+	else if(message != NULL)
+	{
+		strncpy(message, "Failure", strlen("Failure")+1);
+	}
+	nopoll_log (conn->ctx, NOPOLL_LEVEL_INFO, "*****End nopoll_conn_wait_until_connection_ready ****");	
+		    
 	/* report if the connection is ok */
-	return nopoll_conn_is_ok (conn) && nopoll_conn_is_ready (conn);
+	return result;
 }
 
 /* @} */
diff --git a/src/nopoll_conn.h b/src/nopoll_conn.h
index aff440f..b518acd 100644
--- a/src/nopoll_conn.h
+++ b/src/nopoll_conn.h
@@ -49,7 +49,11 @@ noPollConn * nopoll_conn_new (noPollCtx  * ctx,
 			      const char * host_name,
 			      const char * get_url, 
 			      const char * protocols,
-			      const char * origin);
+			      const char * origin,
+			      const char * outbound_interface,
+		          const char * headerNames[],
+			      const char * headerValues[],
+			      const int headerCount);
 
 noPollConn * nopoll_conn_new_opts (noPollCtx       * ctx,
 				   noPollConnOpts  * opts,
@@ -58,8 +62,12 @@ noPollConn * nopoll_conn_new_opts (noPollCtx       * ctx,
 				   const char      * host_name,
 				   const char      * get_url, 
 				   const char      * protocols,
-				   const char      * origin);
-
+				   const char * origin,
+				   const char * outbound_interface,
+                   const char * headerNames[],
+			       const char * headerValues[],
+				   const int headerCount);
+				   
 noPollConn * nopoll_conn_tls_new (noPollCtx  * ctx,
 				  noPollConnOpts * options,
 				  const char * host_ip, 
@@ -67,7 +75,11 @@ noPollConn * nopoll_conn_tls_new (noPollCtx  * ctx,
 				  const char * host_name,
 				  const char * get_url, 
 				  const char * protocols,
-				  const char * origin);
+				  const char * origin,
+				  const char * outbound_interface,
+                  const char * headerNames[],
+			      const char * headerValues[],
+				  const int headerCount);
 
 noPollConn   * nopoll_conn_accept (noPollCtx * ctx, noPollConn * listener);
 
@@ -97,6 +109,8 @@ void           nopoll_conn_set_socket (noPollConn * conn, NOPOLL_SOCKET _socket)
 
 int           nopoll_conn_get_id (noPollConn * conn);
 
+const char * nopoll_conn_get_requested_url (noPollConn * conn);
+
 noPollCtx   * nopoll_conn_ctx    (noPollConn * conn);
 
 noPollRole    nopoll_conn_role   (noPollConn * conn);
@@ -182,7 +196,7 @@ int           __nopoll_conn_send_common (noPollConn * conn,
 					 noPollOpCode frame_type);
 
 nopoll_bool      nopoll_conn_wait_until_connection_ready (noPollConn * conn,
-							  int          timeout);
+							  int          timeout, char * message);
 
 /** internal api **/
 void nopoll_conn_complete_handshake (noPollConn * conn);
diff --git a/src/nopoll_ctx.c b/src/nopoll_ctx.c
index de01024..84ab438 100644
--- a/src/nopoll_ctx.c
+++ b/src/nopoll_ctx.c
@@ -334,8 +334,8 @@ void           nopoll_ctx_unregister_conn (noPollCtx  * ctx,
 
 			/* acquire a reference to the conection */
 			nopoll_conn_unref (conn);
-
-			break;
+            nopoll_log (ctx, NOPOLL_LEVEL_INFO, "Returning, unlock of mutex is not required ");
+			return;
 		} /* end if */
 		
 		iterator++;
@@ -650,6 +650,19 @@ void           nopoll_ctx_set_on_msg    (noPollCtx              * ctx,
 	return;
 }
 
+void           nopoll_ctx_set_on_ping_msg    (noPollCtx              * ctx,
+					 noPollOnMessageHandler   on_ping_msg,
+					 noPollPtr                user_data)
+{
+	nopoll_return_if_fail (ctx, ctx);
+
+	/* set new handler */
+	ctx->on_ping_msg      = on_ping_msg;
+	ctx->on_ping_msg_data = user_data;
+
+	return;
+}
+
 /** 
  * @brief Allows to configure the handler that will be used to let
  * user land code to define OpenSSL SSL_CTX object.
diff --git a/src/nopoll_ctx.h b/src/nopoll_ctx.h
index a9e4154..0ef8e42 100644
--- a/src/nopoll_ctx.h
+++ b/src/nopoll_ctx.h
@@ -87,6 +87,10 @@ void           nopoll_ctx_set_on_msg    (noPollCtx              * ctx,
 					 noPollOnMessageHandler   on_msg,
 					 noPollPtr                user_data);
 
+void           nopoll_ctx_set_on_ping_msg    (noPollCtx              * ctx,
+					 noPollOnMessageHandler   on_ping_msg,
+					 noPollPtr                user_data);
+
 void           nopoll_ctx_set_ssl_context_creator (noPollCtx                * ctx,
 						   noPollSslContextCreator    context_creator,
 						   noPollPtr                  user_data);
diff --git a/src/nopoll_decl.h b/src/nopoll_decl.h
index 72fe194..7151d90 100644
--- a/src/nopoll_decl.h
+++ b/src/nopoll_decl.h
@@ -255,7 +255,12 @@ typedef enum {
 	 * @brief Debug level. Only used to report common
 	 * circumstances that represent the proper functionality.
 	 */
-	NOPOLL_LEVEL_DEBUG, 
+	NOPOLL_LEVEL_DEBUG,
+	/** 
+	 * @brief Info level. Only used to report information for debugging, common
+	 * circumstances that represent the proper functionality.
+	 */
+	NOPOLL_LEVEL_INFO,  
 	/** 
 	 * @brief Warning level. Only used to report that an internal
 	 * issue have happend that could be interesting while
@@ -447,6 +452,13 @@ typedef enum {
 	 */
 	NOPOLL_METHOD_TLSV1_1     = 5
 #endif
+	/** 
+	 * @brief Allows to define TLSv1.2 as SSL protocol used by the
+	 * client or server connection. A connection/listener
+	 * established with this method will only understand this
+	 * method.
+	 */
+	NOPOLL_METHOD_TLSV1_2     = 6
 } noPollSslProtocol ;
 
 BEGIN_C_DECLS
diff --git a/src/nopoll_log.c b/src/nopoll_log.c
index d05fc5c..7f5a01c 100644
--- a/src/nopoll_log.c
+++ b/src/nopoll_log.c
@@ -203,6 +203,9 @@ void __nopoll_log (noPollCtx * ctx, const char * function_name, const char * fil
 		case NOPOLL_LEVEL_DEBUG:
 			printf ("(\e[1;32mdebug\e[0m) ");
 			break;
+		case NOPOLL_LEVEL_INFO:
+			printf ("(\e[1;32minfo\e[0m) ");
+			break;
 		case NOPOLL_LEVEL_WARNING:
 			printf ("(\e[1;33mwarning\e[0m) ");
 			break;
@@ -215,6 +218,9 @@ void __nopoll_log (noPollCtx * ctx, const char * function_name, const char * fil
 		case NOPOLL_LEVEL_DEBUG:
 			printf ("(debug)");
 			break;
+		case NOPOLL_LEVEL_INFO:
+			printf ("(info)");
+			break;
 		case NOPOLL_LEVEL_WARNING:
 			printf ("(warning)");
 			break;
diff --git a/src/nopoll_loop.c b/src/nopoll_loop.c
index fb142ff..08e44e5 100644
--- a/src/nopoll_loop.c
+++ b/src/nopoll_loop.c
@@ -48,6 +48,12 @@
  * @{
  */
 
+/*----------------------------------------------------------------------------*/
+/*                            File Scoped Variables                           */
+/*----------------------------------------------------------------------------*/
+noPollMsg * fragMsg;
+int isPreviousMsgFragment = 0;
+
 /** 
  * @internal Function used by nopoll_loop_wait to register all
  * connections into the io waiting object.
@@ -72,6 +78,15 @@ nopoll_bool nopoll_loop_register (noPollCtx * ctx, noPollConn * conn, noPollPtr
 	return nopoll_false; /* keep foreach, don't stop */
 }
 
+noPollMsg * __nopoll_msg_join(noPollMsg *fragMsg, noPollMsg *msg)
+{
+	noPollMsg *tempMsg = nopoll_msg_join(fragMsg,msg);					
+	nopoll_msg_unref (fragMsg);
+	nopoll_msg_unref (msg);
+	
+	return tempMsg;
+}
+
 /** 
  * @internal Function used to handle incoming data from from the
  * connection and to notify this data on the connection.
@@ -85,11 +100,64 @@ void nopoll_loop_process_data (noPollCtx * ctx, noPollConn * conn)
 	if (msg == NULL)
 		return;
 
-	/* found message, notify it */
-	if (conn->on_msg) 
-		conn->on_msg (ctx, conn, msg, conn->on_msg_data);
-	else if (ctx->on_msg)
-		ctx->on_msg (ctx, conn, msg, ctx->on_msg_data);
+	if(msg->op_code == NOPOLL_PING_FRAME)
+	{
+		/* Initialized ping msg handler */
+		if (conn->on_ping_msg)
+			conn->on_ping_msg (ctx, conn, msg, conn->on_ping_msg_data);
+		else if (ctx->on_ping_msg)
+			ctx->on_ping_msg (ctx, conn, msg, ctx->on_ping_msg_data);
+	}
+	else {
+		/* found message, notify it */
+		/* Initialized msg handler */
+		
+		if(msg->has_fin == 0)
+		{
+			nopoll_log(ctx, NOPOLL_LEVEL_INFO, "Received Fragment - FIN: %d, Opcode: %d, payload size: %d, Remaining bytes: %d",msg->has_fin,msg->op_code,nopoll_msg_get_payload_size(msg),msg->remain_bytes);
+			isPreviousMsgFragment = 1;
+			if(fragMsg == NULL)
+			{
+				fragMsg = msg;
+				nopoll_log(ctx, NOPOLL_LEVEL_INFO, "Received fragment, joined the message, waiting for last fragment");
+				return;
+			}
+			else
+			{
+				if(nopoll_msg_get_payload_size(msg) == msg->remain_bytes)			
+				{
+					nopoll_log(ctx, NOPOLL_LEVEL_DEBUG,"nopoll_msg_ref_count(fragMsg) %d, nopoll_msg_ref_count(msg) %d\n",nopoll_msg_ref_count(fragMsg),nopoll_msg_ref_count(msg));
+					msg = __nopoll_msg_join(fragMsg,msg);
+					nopoll_log(ctx, NOPOLL_LEVEL_INFO,"Received all the pending bytes, hence which means the complete message is received");
+					fragMsg = NULL;
+					isPreviousMsgFragment = 0;
+					nopoll_log(ctx, NOPOLL_LEVEL_INFO,"Received last fragment payload size %d, joined the old fragment messages",msg->payload_size);
+				}
+				else
+				{
+					nopoll_log(ctx, NOPOLL_LEVEL_DEBUG,"nopoll_msg_ref_count(fragMsg) %d, nopoll_msg_ref_count(msg) %d\n",nopoll_msg_ref_count(fragMsg),nopoll_msg_ref_count(msg));
+					fragMsg = __nopoll_msg_join(fragMsg,msg);	
+					nopoll_log(ctx, NOPOLL_LEVEL_INFO, "Received fragment, joined the message, waiting for last fragment");
+					return;
+				}
+			
+			}
+		}
+		else if(msg->has_fin == 1 && isPreviousMsgFragment && msg->op_code == NOPOLL_CONTINUATION_FRAME)
+		{
+			nopoll_log(ctx, NOPOLL_LEVEL_INFO, "Received Fragment - FIN: %d, Opcode: %d, payload size: %d, Remaining bytes: %d",msg->has_fin,msg->op_code,nopoll_msg_get_payload_size(msg),msg->remain_bytes);
+			nopoll_log(ctx, NOPOLL_LEVEL_DEBUG,"nopoll_msg_ref_count(fragMsg) %d, nopoll_msg_ref_count(msg) %d\n",nopoll_msg_ref_count(fragMsg),nopoll_msg_ref_count(msg));
+			msg = __nopoll_msg_join(fragMsg,msg);
+			fragMsg = NULL;
+			isPreviousMsgFragment = 0;
+			nopoll_log(ctx, NOPOLL_LEVEL_INFO,"Received last fragment payload size %d, joined the old fragment messages",msg->payload_size);					
+		}
+
+		if (conn->on_msg)
+			conn->on_msg (ctx, conn, msg, conn->on_msg_data);
+		else if (ctx->on_msg)
+			ctx->on_msg (ctx, conn, msg, ctx->on_msg_data);
+	}
 
 	/* release message */
 	nopoll_msg_unref (msg);
@@ -264,6 +332,21 @@ int nopoll_loop_wait (noPollCtx * ctx, long timeout)
 	return 0;
 }
 
+/** 
+ * @brief To determine if nopoll loop wait has ended/terminated. 
+ * This is to identify termination i.e. when the nopoll loop wait stops and 
+ * there are no connections then this returns 1 else 0.
+ *
+ * @param ctx The context object.
+ *
+ * @return The function returns 0 nopoll loop wait is running and
+ * 1 when the nopoll loop wait has ended/terminatedss 
+ */
+int nopoll_loop_ended (noPollCtx * ctx)
+{
+    return (NULL == ctx->io_engine);
+}
+
 /* @} */
 
 
diff --git a/src/nopoll_loop.h b/src/nopoll_loop.h
index 245d973..338e71a 100644
--- a/src/nopoll_loop.h
+++ b/src/nopoll_loop.h
@@ -47,6 +47,8 @@ int  nopoll_loop_wait (noPollCtx * ctx, long timeout);
  
 void nopoll_loop_stop (noPollCtx * ctx);
 
+int nopoll_loop_ended (noPollCtx * ctx);
+
 END_C_DECLS
 
 #endif
diff --git a/src/nopoll_private.h b/src/nopoll_private.h
index 847e0cf..c1bb08a 100644
--- a/src/nopoll_private.h
+++ b/src/nopoll_private.h
@@ -123,7 +123,9 @@ struct _noPollCtx {
 	 */
 	noPollOnMessageHandler on_msg;
 	noPollPtr              on_msg_data;
-
+	
+	noPollOnMessageHandler on_ping_msg;
+	noPollPtr              on_ping_msg_data;
 	/** 
 	 * @internal Basic fake support for protocol version, by
 	 * default: 13, due to RFC6455 standard
@@ -231,7 +233,9 @@ struct _noPollConn {
 	 */
 	noPollOnMessageHandler on_msg;
 	noPollPtr              on_msg_data;
-
+	
+	noPollOnMessageHandler on_ping_msg;
+	noPollPtr              on_ping_msg_data;
 	/** 
 	 * @internal Reference to defined on ready handling.
 	 */
@@ -357,6 +361,7 @@ struct _noPollHandshake {
 	nopoll_bool     upgrade_websocket;
 	nopoll_bool     connection_upgrade;
 	nopoll_bool     received_101; 
+	nopoll_bool     received_307;
 	char          * websocket_key;
 	char          * websocket_version;
 	char          * websocket_accept;
@@ -364,6 +369,8 @@ struct _noPollHandshake {
 
 	/* reference to cookie header */
 	char          * cookie;
+	/* redirect Location URL */
+	char * redirectURL;
 };
 
 struct _noPollConnOpts {
diff --git a/test/nopoll-regression-client.c b/test/nopoll-regression-client.c
index bd68694..ad47c3b 100644
--- a/test/nopoll-regression-client.c
+++ b/test/nopoll-regression-client.c
@@ -286,7 +286,7 @@ nopoll_bool test_01 (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0);
 	if (! nopoll_conn_is_ok (conn)) {
 	        printf ("ERROR: Expected to find proper client connection status, but found error (conn=%p, conn->session=%d, NOPOLL_INVALID_SOCKET=%d)..\n",
 			conn, (int) nopoll_conn_socket (conn), (int) NOPOLL_INVALID_SOCKET);
@@ -352,7 +352,7 @@ nopoll_bool test_02 (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error.. (conn=%p, conn->session=%d, NOPOLL_INVALID_SOCKET=%d, errno=%d, strerr=%s)..\n",
 			conn, (int) nopoll_conn_socket (conn), (int) NOPOLL_INVALID_SOCKET, errno, strerror (errno));
@@ -424,7 +424,7 @@ nopoll_bool test_03 (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -493,7 +493,7 @@ nopoll_bool test_04 (int chunk_size) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -584,7 +584,7 @@ nopoll_bool test_04a (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -642,14 +642,14 @@ nopoll_bool test_04b (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
 	}
 
 	printf ("Test 04-b: waiting until connection is ok\n");
-	nopoll_conn_wait_until_connection_ready (conn, 5);
+	nopoll_conn_wait_until_connection_ready (conn, 5, NULL);
 
 	printf ("Test 04-b: sending was quick as possible to flood local buffers..\n");
 	
@@ -709,14 +709,14 @@ nopoll_bool test_04b (void) {
 	nopoll_conn_close (conn);
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
 	}
 
 	printf ("Test 04-b: waiting until connection is ok\n");
-	nopoll_conn_wait_until_connection_ready (conn, 5);
+	nopoll_conn_wait_until_connection_ready (conn, 5, NULL);
 
 	/* send a cleanup message */
 	bytes_written = nopoll_conn_send_text (conn, "release-message", 15);
@@ -757,14 +757,14 @@ nopoll_bool test_04c (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
 	}
 
 	printf ("Test 04-c: waiting until connection is ok\n");
-	nopoll_conn_wait_until_connection_ready (conn, 5);
+	nopoll_conn_wait_until_connection_ready (conn, 5, NULL);
 
 	/* remove local file */
 	if (stat ("copy-test-04c.txt", &file_info) == 0) {
@@ -920,7 +920,7 @@ nopoll_bool test_05 (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -972,7 +972,7 @@ nopoll_bool test_06 (void) {
 	nopoll_conn_opts_ssl_peer_verify (opts, nopoll_false);
 
 	/* call to create a connection */
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1020,7 +1020,7 @@ nopoll_bool test_07 (void) {
 	nopoll_conn_opts_ssl_peer_verify (opts, nopoll_false);
 
 	/* call to create a connection */
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1062,7 +1062,7 @@ nopoll_bool test_08 (void) {
 	ctx = create_ctx ();
 
 	/* call to connect to TLS port expecting non-TLS protocol */
-	conn = nopoll_conn_new (ctx, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1235", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 
 	/* wait a bit 100ms */
 	nopoll_sleep (100000);
@@ -1093,7 +1093,7 @@ nopoll_bool test_09 (void) {
 	nopoll_ctx_set_protocol_version (ctx, 12);
 
 	/* call to connect to TLS port expecting non-TLS protocol */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 
 	/* wait a bit 100ms */
 	nopoll_sleep (100000);
@@ -1121,7 +1121,7 @@ nopoll_bool test_10 (void) {
 	ctx = create_ctx ();
 
 	/* call to connect from an origining that shouldn't be allowed */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, "http://deny.aspl.es");
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, "http://deny.aspl.es",NULL, NULL,NULL,0);
 
 	/* wait a bit 100ms */
 	nopoll_sleep (100000);
@@ -1149,9 +1149,9 @@ nopoll_bool test_11 (void) {
 	ctx = create_ctx ();
 
 	/* create a working connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 
-	if (! nopoll_conn_wait_until_connection_ready (conn, 5)) {
+	if (! nopoll_conn_wait_until_connection_ready (conn, 5, NULL)) {
 		printf ("ERROR: Expected a FAILING connection status due to origing denied, but it working..\n");
 		return nopoll_false;
 	} /* end if */
@@ -1191,9 +1191,9 @@ nopoll_bool test_12 (void) {
 	iterator = 0;
 	while (iterator < 1000) {
 		/* create a working connection */
-		conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+		conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 		
-		if (! nopoll_conn_wait_until_connection_ready (conn, 5)) {
+		if (! nopoll_conn_wait_until_connection_ready (conn, 5, NULL)) {
 			printf ("ERROR: Expected NOT to find a FAILING connection status, errno is=%d..\n", errno);
 			return nopoll_false;
 		} /* end if */
@@ -1325,7 +1325,7 @@ nopoll_bool test_14 (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1395,7 +1395,7 @@ nopoll_bool test_15 (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1469,7 +1469,7 @@ nopoll_bool test_16 (void) {
 	ctx = create_ctx ();
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1627,7 +1627,7 @@ nopoll_bool test_17 (void) {
 	} /* end if */
 
 	/* call to create a connection */
-	conn = nopoll_conn_new (ctx, "localhost", "22351", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "22351", NULL, NULL, NULL, NULL,NULL, NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1711,7 +1711,7 @@ nopoll_bool test_18 (void) {
 	nopoll_conn_opts_ssl_peer_verify (opts, nopoll_false);
 
 	/* call to create a connection */
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1748,7 +1748,7 @@ nopoll_bool test_19 (void) {
 	nopoll_conn_opts_set_ssl_protocol (opts, NOPOLL_METHOD_SSLV23);
 
 	/* create connection */
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1236", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1236", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 
 	/* check connection */
 	if (! nopoll_conn_is_ok (conn)) {
@@ -1769,7 +1769,7 @@ nopoll_bool test_19 (void) {
 	nopoll_conn_opts_set_ssl_protocol (opts, NOPOLL_METHOD_SSLV23);
 
 	/* create connection */
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 
 	/* check connection */
 	if (! nopoll_conn_is_ok (conn)) {
@@ -1789,7 +1789,7 @@ nopoll_bool test_19 (void) {
 
 	/* create connection */
 	printf ("Test 19: checking SSLv3 with TLSv1..\n");
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1234", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 
 	/* check connection */
 	if (nopoll_conn_is_ok (conn)) {
@@ -1850,7 +1850,7 @@ nopoll_bool test_21 (void) {
 
 	/* call to create a connection */
 	printf ("Test 21: check ssl connection (with auth certificate)..\n");
-	conn = nopoll_conn_tls_new (ctx, NULL, "localhost", "1239", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, NULL, "localhost", "1239", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to FAILURE client connection status, but ok..\n");
 		return nopoll_false;
@@ -1868,7 +1868,7 @@ nopoll_bool test_21 (void) {
 					NULL,
 					/* ca certificate */
 					"root.pem");
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1239", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1239", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! test_sending_and_check_echo (conn, "Test 21", "This is a test")) {
 		printf ("ERROR: it should WORK, client certificate isn't working..\n");
 		return nopoll_false;
@@ -1908,7 +1908,7 @@ nopoll_bool test_22 (void) {
 	ctx = create_ctx ();
 
 	/* create connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -1949,7 +1949,7 @@ nopoll_bool test_22 (void) {
 	nopoll_conn_opts_ssl_peer_verify (opts, nopoll_false);
 
 	/* call to create a connection */
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2037,7 +2037,7 @@ nopoll_bool test_23 (void) {
 	ctx = create_ctx ();
 
 	/* create connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2052,7 +2052,7 @@ nopoll_bool test_23 (void) {
 	nopoll_conn_close (conn);
 
 	/* create connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2077,7 +2077,7 @@ nopoll_bool test_23 (void) {
 	nopoll_conn_opts_ssl_peer_verify (opts, nopoll_false);
 
 	/* call to create a connection */
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2093,7 +2093,7 @@ nopoll_bool test_23 (void) {
 	/* call to create a connection second connection */
 	opts = nopoll_conn_opts_new ();
 	nopoll_conn_opts_ssl_peer_verify (opts, nopoll_false);
-	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_tls_new (ctx, opts, "localhost", "1235", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2131,7 +2131,7 @@ nopoll_bool test_24 (void) {
 	nopoll_conn_opts_set_cookie (opts, "theme=light; sessionToken=abc123");
 
 	/* create connection */
-	conn = nopoll_conn_new_opts (ctx, opts, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new_opts (ctx, opts, "localhost", "1234", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2186,7 +2186,7 @@ nopoll_bool test_25_check_cookie (noPollCtx * ctx, const char * cookie) {
 	nopoll_conn_opts_set_cookie (opts, cookie);
 
 	/* create connection */
-	conn = nopoll_conn_new_opts (ctx, opts, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new_opts (ctx, opts, "localhost", "1234", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2237,7 +2237,7 @@ nopoll_bool test_26 (void) {
 	ctx = create_ctx ();
 
 	/* create connection */
-	conn = nopoll_conn_new (ctx, "echo.websocket.org", "80", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "echo.websocket.org", "80", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2265,7 +2265,7 @@ nopoll_bool test_27 (void) {
 	ctx = create_ctx ();
 
 	/* create connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, "/", "chat-protocol", "http://www.aspl.es");
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, "/", "chat-protocol", "http://www.aspl.es",NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2288,7 +2288,7 @@ nopoll_bool test_27 (void) {
 	nopoll_conn_close (conn);	
 
 	/* create connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, "/", "hello-protocol", "http://www.aspl.es");
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, "/", "hello-protocol", "http://www.aspl.es",NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
@@ -2328,14 +2328,14 @@ nopoll_bool test_28 (void) {
 	ctx = create_ctx ();
 
 	/* create connection */
-	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL);
+	conn = nopoll_conn_new (ctx, "localhost", "1234", NULL, NULL, NULL, NULL,NULL,NULL,NULL,0);
 	if (! nopoll_conn_is_ok (conn)) {
 		printf ("ERROR: Expected to find proper client connection status, but found error..\n");
 		return nopoll_false;
 	} /* end if */
 
 	/* wait until it is connected */
-	nopoll_conn_wait_until_connection_ready (conn, 5);
+	nopoll_conn_wait_until_connection_ready (conn, 5, NULL);
 
 	/* send a message to request connection close with a particular message */
 	if (nopoll_conn_send_text (conn, "close with message", 18) != 18) {
-- 
1.9.1

